#!/bin/bash

help_message="\n
NAME:\n
\tvctlwn - Alsa Volume Control With Notiсе\n
OPTIONS:\n
\t-?, -h, --help: Help.\n
\t-m, --mixer: Mixer name. Default \"Master\".\n
\t-v, --value: Value for change level in percents. Only positive numbers. Example: 0, 5, 10. Default: 0.\n
\t-i, --increment: Increment sound level on value (-v). Default.\n
\t-d, --decrement: Decrement sound level on value (-v).\n
\t-s, --state: Set mixer state. Possible values: mute, unmute, toggle. Default: unmute.\n
\t-t, --expire-time: Timeout in milliseconds at which to expire the notification. Default: 1000\n
EXAMPLE:\n
\tvctlwn -m Master -v 5 -i -s unmute\n"

i=0
sign="+"
value=0
mixer=Master
state="unmute"
expire_time="1000"

skip_arg="0"
double_expression='^[0-9]+(\.[0-9]+)?$'
integer_expression='^[0-9]+$'


for var in $@; do
    # Current argument number
    (( i++ ))
    if [ $skip_arg = "1" ]; then
        skip_arg="0"
        continue
    fi
    case $var in
        -? | -h | --help)
            echo -e $help_message
            exit 0
            break
            ;;
        -m | --mixer)
            let "next_arg = $i + 1"
            mixer="${!next_arg}"
            skip_arg="1"
            ;;
        -v | --value)
            let "next_arg = $i + 1"
            value="${!next_arg}"
            if [[ $value =~ $double_expression ]]; then
                skip_arg="1"
            else
                echo "Invalid value. Value must be number as double or integer!"
                exit 1
                break
            fi
            if [[ "$value" -gt "100" || "$value" -lt "0" ]]; then
                echo "Invalid value. Value must be in range [0..100]"
                exit 1
                break
            fi
            ;;
        -i | --increment)
            sign="+"
            ;;
        -d | --decrement)
            sign="-"
            ;;
        -s | --state)
            let "next_arg = $i + 1"
            state="${!next_arg}"
            skip_arg="1"
            case $state in
                mute | unmute | toggle)
                    ;;
                *)
                    echo "Invaled state. Possible values of state: mute, unmute, toggle"
                    exit 1
                    break
                    ;;
                esac
            ;;
        -t | --expire-time) 
            let "next_arg = $i + 1"
            expire_time="${!next_arg}"
            skip_arg="1"
            if [[ $expire_time =~ $integer_expression ]]; then
                if [[ "$expire_time" -lt "0" ]]; then
                    echo "Error!. Expire time must be greater than zero."
                    exit 1
                    break
                fi
            else
                echo "Error!. Expire time must be integer value."
                exit 1
                break
            fi
            ;;
            
        *)
            echo "Invalid argument!"
            exit 1
            break
            ;;
    esac
done


eval "amixer -q set $mixer $value%$sign $state"
notify_value="Volume [`amixer sget $mixer | grep Playback | tail -n 1 | cut -d'[' -f4 | cut -d']' -f1`]: `amixer sget $mixer | grep "Playback" | tail -n 1 | cut -d'[' -f2 | cut -d']' -f1`"
exec notify-send "$notify_value" -t $expire_time
